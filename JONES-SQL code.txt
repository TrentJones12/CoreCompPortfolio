STANFORD SQL Test - T. JONES authored SQL:

/* Create the schema for our tables */

create table Movie(mID int, title text, year int, director text);
create table Reviewer(rID int, name text);
create table Rating(rID int, mID int, stars int, ratingDate date);



/* Populate the tables with our data */

insert into Movie values(101, 'Gone with the Wind', 1939, 'Victor Fleming');
insert into Movie values(102, 'Star Wars', 1977, 'George Lucas');
insert into Movie values(103, 'The Sound of Music', 1965, 'Robert Wise');
insert into Movie values(104, 'E.T.', 1982, 'Steven Spielberg');
insert into Movie values(105, 'Titanic', 1997, 'James Cameron');
insert into Movie values(106, 'Snow White', 1937, null);
insert into Movie values(107, 'Avatar', 2009, 'James Cameron');
insert into Movie values(108, 'Raiders of the Lost Ark', 1981, 'Steven Spielberg');

insert into Reviewer values(201, 'Sarah Martinez');
insert into Reviewer values(202, 'Daniel Lewis');
insert into Reviewer values(203, 'Brittany Harris');
insert into Reviewer values(204, 'Mike Anderson');
insert into Reviewer values(205, 'Chris Jackson');
insert into Reviewer values(206, 'Elizabeth Thomas');
insert into Reviewer values(207, 'James Cameron');
insert into Reviewer values(208, 'Ashley White');


insert into Rating values(201, 101, 2, '2011-01-22');
insert into Rating values(201, 101, 4, '2011-01-27');
insert into Rating values(202, 106, 4, null);
insert into Rating values(203, 103, 2, '2011-01-20');
insert into Rating values(203, 108, 4, '2011-01-12');
insert into Rating values(203, 108, 2, '2011-01-30');
insert into Rating values(204, 101, 3, '2011-01-09');
insert into Rating values(205, 103, 3, '2011-01-27');
insert into Rating values(205, 104, 2, '2011-01-22');
insert into Rating values(205, 108, 4, null);
insert into Rating values(206, 107, 3, '2011-01-15');
insert into Rating values(206, 106, 5, '2011-01-19');
insert into Rating values(207, 107, 5, '2011-01-20');
insert into Rating values(208, 104, 3, '2011-01-02');



###
Find the titles of all movies directed by Steven Spielberg -
	select title from Movie where director = 'Steven Spielberg';
###

###
Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order -
	select distinct year from Movie, Rating
		where Movie.mID = Rating.mID and stars >= 4;
###
	
###
Find the titles of all movies that have no ratings -
	select distinct title from Movie, Rating
		where Movie.mID not in (select Rating.mID from Rating);
###

###
Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date.
	select name from Reviewer
		where rID in (select rID from Rating where ratingDate is null);
###

###
Write a query to return the ratings data in a more readable format:
reviewer name, movie title, stars, and ratingDate.
Also, sort the data, first by reviewer name, then by movie title,
and lastly by number of stars. 
	select distinct reviewer.name, title, stars, ratingDate
		from reviewer, rating, movie
		where reviewer.rID = rating.rID and rating.mID = movie.mID order by reviewer.name, title, stars;
###

###
For all cases where the same reviewer rated the same movie twice
and gave it a higher rating the second time, return the reviewer's
name and the title of the movie. 
	select name, title
		from (reviewer join rating using (rID)), movie
		where movie.mid = rating.mid and exists (select * from rating r1 where rating.mid = r1.mid and rating.rid = r1.rid and rating.stars < r1.stars and r1.ratingdate > rating.ratingdate);
###

###
For each movie that has at least one rating, find the highest number
of stars that movie received. Return the movie title and number of stars.
Sort by movie title.
	select title, max(stars)
		from (movie join rating using (mID))
		group by title;
###

###
For each movie, return the title and the 'rating spread', that is,
the difference between highest and lowest ratings given to that movie.
Sort by rating spread from highest to lowest, then by movie title. 
	select distinct title, (r1.stars-r2.stars) as ratingSpread
		from movie, (rating r1 join rating r2 using (mID))
		where movie.mID = r1.mID and ratingSpread > 0 order by ratingSpread, title;
###


###
Find the difference between the average rating of movies released
before 1980 and the average rating of movies released after 1980.
(Make sure to calculate the average rating for each movie, then the
average of those averages for movies before 1980 and movies after.
Don't just calculate the overall average rating before and after 1980.)
	select (select avg(str)
		from (movie join
			(select avg(stars) as str,mID from rating where mID = 101
			union
			select avg(stars) as str,mID from rating where mID = 103
			union
			select avg(stars) as str,mID from rating where mID = 104
			union
			select avg(stars) as str,mID from rating where mID = 106
			union
			select avg(stars) as str,mID from rating where mID = 107
			union
			select avg(stars) as str,mID from rating where mID = 108 order by mID)
		using (mID))
		where year < 1980)
	-
		(select avg(str)
			from (movie join
				(select avg(stars) as str,mID from rating where mID = 101
				union
				select avg(stars) as str,mID from rating where mID = 103
				union
				select avg(stars) as str,mID from rating where mID = 104
				union
				select avg(stars) as str,mID from rating where mID = 106
				union
				select avg(stars) as str,mID from rating where mID = 107
				union
				select avg(stars) as str,mID from rating where mID = 108 order by mID)
			using (mID)
		)
		where year >= 1980) as spr;
###



/* Create the schema for our tables */

create table Highschooler(ID int, name text, grade int);

create table Friend(ID1 int, ID2 int);

create table Likes(ID1 int, ID2 int);



/* Populate the tables with our data */

insert into Highschooler values (1510, 'Jordan', 9);
insert into Highschooler values (1689, 'Gabriel', 9);
insert into Highschooler values (1381, 'Tiffany', 9);
insert into Highschooler values (1709, 'Cassandra', 9);
insert into Highschooler values (1101, 'Haley', 10);
insert into Highschooler values (1782, 'Andrew', 10);
insert into Highschooler values (1468, 'Kris', 10);
insert into Highschooler values (1641, 'Brittany', 10);
insert into Highschooler values (1247, 'Alexis', 11);
insert into Highschooler values (1316, 'Austin', 11);
insert into Highschooler values (1911, 'Gabriel', 11);
insert into Highschooler values (1501, 'Jessica', 11);
insert into Highschooler values (1304, 'Jordan', 12);
insert into Highschooler values (1025, 'John', 12);
insert into Highschooler values (1934, 'Kyle', 12);
insert into Highschooler values (1661, 'Logan', 12);


insert into Friend values (1510, 1381);
insert into Friend values (1510, 1689);
insert into Friend values (1689, 1709);
insert into Friend values (1381, 1247);
insert into Friend values (1709, 1247);
insert into Friend values (1689, 1782);
insert into Friend values (1782, 1468);
insert into Friend values (1782, 1316);
insert into Friend values (1782, 1304);
insert into Friend values (1468, 1101);
insert into Friend values (1468, 1641);
insert into Friend values (1101, 1641);
insert into Friend values (1247, 1911);
insert into Friend values (1247, 1501);
insert into Friend values (1911, 1501);
insert into Friend values (1501, 1934);
insert into Friend values (1316, 1934);
insert into Friend values (1934, 1304);
insert into Friend values (1304, 1661);
insert into Friend values (1661, 1025);


insert into Likes values(1689, 1709);
insert into Likes values(1709, 1689);
insert into Likes values(1782, 1709);
insert into Likes values(1911, 1247);
insert into Likes values(1247, 1468);
insert into Likes values(1641, 1468);
insert into Likes values(1316, 1304);
insert into Likes values(1501, 1934);
insert into Likes values(1934, 1501);
insert into Likes values(1025, 1101);

insert into Friend select ID2, ID1 from Friend;


###
Find the names of all students who are friends with someone named Gabriel.
	select distinct name from highschooler, friend
		where id in (select id1 from friend where id2 = 1689 or id2 = 1911
			union
			select id2 from friend where id1 = 1689 or id1 = 1911);
###


###
For every student who likes someone 2 or more grades younger than themselves, return that student's name
and grade, and the name and grade of the student they like. 
	select a.name,a.grade,b.name,b.grade
		from (select name,id,grade,id2
			from highschooler a
			join likes b
			where a.id = b.id1)
		a
		join (select name,id,grade
			from highschooler a
			join likes b where a.id = b.id2)
		b on a.id2=b.id
	where b. grade <= a. grade -2;
###